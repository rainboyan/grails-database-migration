buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
    }
}

version project.projectVersion
group "org.grails"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "java-library"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.internal.grails-plugin-publish"
apply plugin: "org.grails.grails-gsp"
apply plugin: "org.asciidoctor.jvm.convert"

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

configurations {
    documentation
}

dependencies {
    api "org.liquibase:liquibase-core:$liquibaseVersion"
    api "org.apache.groovy:groovy-sql:$groovyVersion"

    api("org.liquibase.ext:liquibase-hibernate5:$liquibaseHibernateVersion") {
        exclude group: 'org.hibernate', module: 'hibernate-core'
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
        exclude group: 'org.hibernate', module: 'hibernate-envers'
        exclude group: 'org.liquibase', module: 'liquibase-core'
    }
    compileOnly("org.grails:grails-shell") {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    compileOnly "org.hibernate:hibernate-core-jakarta:5.6.15.Final"

    compileOnly 'org.springframework.boot:spring-boot-starter-logging'
    compileOnly "org.springframework.boot:spring-boot-starter-actuator"
    compileOnly "org.springframework.boot:spring-boot-autoconfigure"
    compileOnly "org.springframework.boot:spring-boot-starter-tomcat"

    compileOnly "org.grails:grails-boot"
    compileOnly "jakarta.servlet:jakarta.servlet-api:6.0.0"
    compileOnly "org.grails.plugins:hibernate5"

    testImplementation "org.springframework.boot:spring-boot-starter-tomcat"
    testImplementation "org.hibernate:hibernate-core-jakarta:5.6.15.Final"
    testImplementation "org.grails.plugins:hibernate5"

    testImplementation "org.grails:grails-test-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "com.h2database:h2:2.1.214"

    documentation "org.fusesource.jansi:jansi:1.18"
    documentation "com.github.javaparser:javaparser-core:3.15.14"
    documentation "org.apache.groovy:groovy:$groovyVersion"
    documentation "org.apache.groovy:groovy:$groovyVersion"
    documentation "org.apache.groovy:groovy-ant:$groovyVersion"
    documentation "org.apache.groovy:groovy-templates:$groovyVersion"
}

grailsPublish {
    userOrg = "grails"
    githubSlug = 'grails-plugins/grails-database-migration'
    license {
        name = 'Apache-2.0'
    }
    title = "Grails Database Migration Plugin"
    desc = "Grails Database Migration Plugin"
    developers = [kazukiyamamoto: "Kazuki YAMAMOTO", rainboyan: "Michael Yan"]
}

asciidoctor {
    baseDirFollowsSourceFile()
    outputDir = "$buildDir/asciidoc"

    resources {
        from('src/docs/images')
        into "./images"
    }

    attributes 'experimental'  : 'true',
            'compat-mode'   : 'true',
            'toc'           : 'left',
            'icons'         : 'font',
            'version'       : project.version,
            'groupId'       : project.group,
            'artifactId'    : project.name,
            'sourcedir'     : "${projectDir}/src/main/groovy",
            'liquibaseVersion': liquibaseVersion
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Groovydoc) {
    configure {
        docTitle = "Grails Database Migration Plugin ${version}"
        source = project.files('src/main/groovy')
        destinationDir = new File(buildDir, 'docs/api')
        classpath = configurations.documentation
        groovyClasspath = configurations.documentation
    }
}

task docs(type:Copy, group: 'documentation')  {
    dependsOn(groovydoc, asciidoctor)
    from "$buildDir/asciidoc"
    into "$buildDir/docs"
}

jar {
    exclude "testapp/**/**"
}

test {
    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}
